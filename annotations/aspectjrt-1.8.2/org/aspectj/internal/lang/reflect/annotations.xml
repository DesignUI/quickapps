<root>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice getAdvice(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice[] getAdvice(org.aspectj.lang.reflect.AdviceKind...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl InterTypeFieldDeclarationImpl(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;, java.lang.reflect.Field) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl DeclarePrecedenceImpl(java.lang.String, org.aspectj.lang.reflect.AjType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl java.lang.reflect.Type[] getGenericParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.DeclareSoft[] getDeclareSofts()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getInterfaces()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getExceptionTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getDeclaredAjTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeFieldDeclaration getDeclaredITDField(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Method getDeclaredMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice[] getAdvice(org.aspectj.lang.reflect.AdviceKind...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl InterTypeMethodDeclarationImpl(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;, java.lang.reflect.Method, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.StringToType java.lang.reflect.Type[] commaSeparatedListToTypeArray(java.lang.String, java.lang.Class)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeConstructorDeclaration getITDConstructor(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeConstructorDeclaration getDeclaredITDConstructor(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.PerClauseImpl java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getExceptionTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl InterTypeFieldDeclarationImpl(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;, java.lang.reflect.Field) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice getDeclaredAdvice(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl java.lang.reflect.Type[] getGenericParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Method[] getDeclaredMethods()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Method getMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Pointcut getPointcut(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeMethodDeclaration getITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeMethodDeclaration getDeclaredITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeConstructorDeclaration getDeclaredITDConstructor(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.DeclareAnnotation[] getDeclareAnnotations()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeConstructorDeclaration getITDConstructor(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeMethodDeclaration getDeclaredITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AdviceImpl org.aspectj.lang.reflect.AjType getDeclaringType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl InterTypeDeclarationImpl(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Method getMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Method[] getMethods()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.PointcutImpl org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl org.aspectj.lang.reflect.AjType&lt;?&gt; getReturnType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice[] getDeclaredAdvice(org.aspectj.lang.reflect.AdviceKind...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Constructor getConstructor(org.aspectj.lang.reflect.AjType&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Pointcut getDeclaredPointcut(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Field getField(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice[] getDeclaredAdvice(org.aspectj.lang.reflect.AdviceKind...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeMethodDeclaration getITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.DeclareAnnotationImpl DeclareAnnotationImpl(org.aspectj.lang.reflect.AjType&lt;?&gt;, java.lang.String, java.lang.String, java.lang.annotation.Annotation, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.DeclareParents[] getDeclareParents()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Method getDeclaredMethod(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice getDeclaredAdvice(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl InterTypeMethodDeclarationImpl(org.aspectj.lang.reflect.AjType&lt;?&gt;, org.aspectj.lang.reflect.AjType&lt;?&gt;, java.lang.reflect.Method, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getAjTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Constructor getDeclaredConstructor(org.aspectj.lang.reflect.AjType&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Field[] getFields()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.DeclarePrecedence[] getDeclarePrecedence()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.StringToType java.lang.reflect.Type stringToType(java.lang.String, java.lang.Class) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Field getDeclaredField(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.InterTypeFieldDeclaration getITDField(java.lang.String, org.aspectj.lang.reflect.AjType&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.DeclareErrorOrWarning[] getDeclareErrorOrWarnings()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.PointcutImpl org.aspectj.lang.reflect.AjType&lt;?&gt;[] getParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.lang.reflect.Advice getAdvice(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.aspectj.internal.lang.reflect.AjTypeImpl java.lang.reflect.Field[] getDeclaredFields()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
